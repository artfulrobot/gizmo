<?php

// Drupal hooks.
/**
 * Implements hook_block_info().
 */
function gizmo_block_info() {
  return Gizmo::blockInfo();
}

/**
 * Implements hook_block_view().
 */
function gizmo_block_view($delta = '') {
  if (substr($delta, 0, 6) == 'gizmo-') {
    $gizmo = Gizmo::createFromId(substr($delta, 6));
    return $gizmo->blockView($delta);
  }
}
/**
 * Implements hook_menu().
 */
function gizmo_menu() {

  $items['admin/structure/gizmo/add/%'] = array(
    'title' => 'Create new Gizmos',
    'access arguments' => array('administer_gizmos'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gizmo_form_gizmo_edit','add', 4),
  );
  $items['admin/structure/gizmo/%/delete'] = array(
    'title' => 'Delete Gizmo',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gizmo_form_gizmo_delete', 3),
    'access arguments' => array('administer_gizmos'),
  );
  $items['admin/structure/gizmo/%'] = array(
    'title' => 'Edit Gizmo',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gizmo_form_gizmo_edit', 3),
    'access arguments' => array('administer_gizmos'),
  );
  $items['admin/structure/gizmo'] = array(
    'title' => 'Gizmos',
    'description' => 'Administer Gizmos - reusable functionality',
    'page callback' => 'gizmo_page_admin_gizmo',
    'access arguments' => array('administer_gizmos'),
  );

  return $items;
}
/**
 * Implements hook_permission().
 */
function gizmo_permission() {
  return [
    'administer_gizmos' => [
      'title' => 'Administer gizmos',
      'description' => '',
    ],
  ];
}

/**
 * Implements hook_forms()
 *
 * We provide a base form for handling all gizmo forms, meaning gizmo instances
 * can be responsible for defining, validating submitting and ajaxing their
 * forms.
 *
 * Gizmo form IDs are like
 *     gizmo__<id>__<delta>
 *
 * Where `<id>` is the numeric ID of the gizmo instance; `<delta>` is a method
 * name like "userColourForm".
 *
 * This would instantiate the gizmo with the given ID and then call:
 * - $the_gizmo->userColourForm() to create the form
 * - $the_gizmo->userColourFormValidate() to validate the form
 * - $the_gizmo->userColourFormSubmit() to validate the form
 * - $the_gizmo->userColourFormAjax() for ajax handling.
 */
function gizmo_forms($form_id, $args) {
  if (preg_match('/^gizmo__(\d+)__(.*)$/', $form_id, $matches)) {
    // Looks like a form a gizmo provides.
    $gizmo_id = $matches[1];
    $form_delta = $matches[2];
    // Instantiate the gizmo.
    $gizmo = Gizmo::createFromId($gizmo_id);
    return [
      $form_id => [
        'callback' => 'gizmo_form_delegation',
        'callback arguments' => [$gizmo_id, $form_delta],
      ],
    ];
  }
}
// Page Callbacks.
/**
 * Admin page lists gizmos.
 */
function gizmo_page_admin_gizmo() {
  $gizmos = db_query("SELECT * FROM gizmo ORDER BY classname, name;")->fetchAllAssoc('id', PDO::FETCH_ASSOC);
  $rows = [];
  foreach ($gizmos as $gizmo_rec) {
    try {
      $gizmo = Gizmo::createFromRowData($gizmo_rec);
    }
    catch (GizmoNotFoundException $e) {
      $rows []= ['data' => [
        htmlspecialchars($gizmo_rec['classname']),
        htmlspecialchars($gizmo_rec['name']),
        htmlspecialchars('ERROR: '. $e->getMessage()),
        "",
        '',
      ]];
      continue;

    }
    $rows []= ['data' => [
      htmlspecialchars($gizmo->human_name),
      $gizmo->machine_name, // Should be safe.
      "<a href='/admin/structure/gizmo/$gizmo->id' >Edit</a> | "
      . "<a href='/admin/structure/gizmo/$gizmo->id/delete' >Delete</a>",
      $gizmo->tokensList(),
    ]];
  }
  if (!$rows) {
    $page['gizmo_list'] = ['#markup' => 'No gizmos defined'];
  }
  else {
    $page['gizmo_list'] = [
      '#theme' => 'table',
      '#header' => ['Type', 'Name', 'Actions', 'Tokens Exposed'],
      '#rows' => $rows,
    ];
  }

  $adds = [];
  foreach (module_invoke_all('gizmo_classes') as $gizmo_class) {
    $gizmo = new $gizmo_class();
    $adds []= "<a href='/admin/structure/gizmo/add/$gizmo_class'>" . htmlspecialchars($gizmo->human_name) . "</a> ";
  }

  if ($adds) {
    $page['adds'] = ['#markup' => "<p>Create new: " . implode(' | ', $adds) . "</p>"];
  }
  else {
    drupal_set_message('There are no modules defining gizmos. You can enable the gizmo_demo module if you want to see how it works.', 'warning');
  }

  return $page;
}
// Forms.
function gizmo_form_gizmo_edit($form, &$form_state) {
  $id = $form_state['build_info']['args'][0];
  if ($id == 'add') {
    $gizmo = Gizmo::createFromClass($form_state['build_info']['args'][1]);
  }
  else {
    $gizmo = Gizmo::createFromId($id);
  }
  $form_state['gizmo'] = $gizmo;
  return $gizmo->adminFormShared($form, $form_state);
}
function gizmo_form_gizmo_edit_validate($form, &$form_state) {
  $form_state['gizmo']->adminFormValidateShared($form, $form_state);
}
function gizmo_form_gizmo_edit_submit($form, &$form_state) {
  $form_state['gizmo']->adminFormSubmit($form, $form_state);
  $form_state['redirect'] = 'admin/structure/gizmo';
}

function gizmo_form_gizmo_delete($form, &$form_state) {
  $id = $form_state['build_info']['args'][0];
  $gizmo = Gizmo::createFromId($id);
  $form['delete'] = [
    '#prefix' => '<p>Deleting the ' . htmlspecialchars($gizmo->human_name) . "
      Gizmo called $gizmo->machine_name will delete its config for ever. If any
      of its content is in use on the site, this may break your site. Sure?</p>",
    '#type' => 'submit',
    '#value' => 'Delete',
  ];
  return $form;
}
function gizmo_form_gizmo_delete_submit($form, &$form_state) {
  $id = $form_state['build_info']['args'][0];
  Gizmo::deleteGizmo($id);
  $form_state['redirect'] = 'admin/structure/gizmo';
}

/**
 * Delegate form building to the gizmo.
 */
function gizmo_form_delegation($form, &$form_state, $gizmo_id, $form_delta) {
  // Save the gizmo_id and form_delta in the $form var.
  $form['#gizmo_id'] = $gizmo_id;
  $form['#form_delta'] = $form_delta;

  $gizmo = Gizmo::createFromId($gizmo_id);
  if (!method_exists($gizmo, $form_delta)) {
    throw new InvalidArgumentException("Form $form_delta is not defined by the $gizmo->human_name Gizmo.");
  }
  return $gizmo->$form_delta($form, $form_state);
}
/**
 * Delegate validation to the gizmo.
 */
function gizmo_form_delegation_validate($form, &$form_state) {
  return gizmo_form_delegation_helper($form, $form_state, 'Validate');
}

/**
 * Delegate submission to the gizmo.
 */
function gizmo_form_delegation_submit($form, &$form_state) {
  return gizmo_form_delegation_helper($form, $form_state, 'Submit');
}

/**
 * Delegate ajax handling to the gizmo.
 *
 * Nb. to use this gizmos must return forms like
 *     $form['submit_button'] => [
 *       '#type' => 'submit',
 *       '#ajax' => [
 *         'callback' => 'gizmo_form_delegation_ajax',
 *         ...
 *       ],
 *       ...
 *     ];
 */
function gizmo_form_delegation_ajax($form, &$form_state) {
  return gizmo_form_delegation_helper($form, $form_state, 'Ajax');
}

/**
 * DRY code used by above delegation functions.
 */
function gizmo_form_delegation_helper($form, &$form_state, $modifier) {
  $gizmo = Gizmo::createFromId($form['#gizmo_id']);
  $method = $form['#form_delta'] . $modifier;
  if (method_exists($gizmo, $method)) {
    return $gizmo->$method($form, $form_state);
  }
}

